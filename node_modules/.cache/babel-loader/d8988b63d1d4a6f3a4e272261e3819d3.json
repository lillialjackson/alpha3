{"ast":null,"code":"import _toConsumableArray from \"/Users/Lillia/workspace/alpha2/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/Lillia/workspace/alpha2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Lillia/workspace/alpha2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Lillia/workspace/alpha2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Lillia/workspace/alpha2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Lillia/workspace/alpha2/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/Lillia/workspace/alpha2/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/Lillia/workspace/alpha2/src/components/chat/chatwrapper.js\";\nimport React from 'react';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nimport Message from './message.js';\nimport MessageList from './messagelist.js';\nimport NewRoomForm from './newroomform.js';\nimport RoomList from './roomlist.js';\nimport SendMessageForm from './sendmessageform.js';\nimport './chatstyle.css';\nimport { instanceLocator, tokenUrl, chatKey } from '../../config.js';\n\nvar ChatWrapper =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ChatWrapper, _React$Component);\n\n  function ChatWrapper(props) {\n    var _this;\n\n    _classCallCheck(this, ChatWrapper);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChatWrapper).call(this, props));\n    _this.state = {\n      roomId: '',\n      messages: [],\n      joinableRooms: [],\n      joinedRooms: []\n    };\n    _this.sendMessage = _this.sendMessage.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.subscribeToRoom = _this.subscribeToRoom.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getRooms = _this.getRooms.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.createRoom = _this.createRoom.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ChatWrapper, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // this.onUsernameSubmitted(this.props.username);\n      var chatManager = new ChatManager({\n        instanceLocator: instanceLocator,\n        userId: 'joeclimber',\n        tokenProvider: new TokenProvider({\n          url: tokenUrl\n        }) // key: chatKey\n\n      });\n      chatManager.connect().then(function (currentUser) {\n        _this2.currentUser = currentUser;\n\n        _this2.getRooms();\n\n        _this2.subscribeToRoom();\n      }).catch(function (err) {\n        return console.log('error on connecting', err);\n      });\n    }\n  }, {\n    key: \"getRooms\",\n    value: function getRooms() {\n      var _this3 = this;\n\n      this.currentUser.getJoinableRooms().then(function (joinableRooms) {\n        _this3.setState({\n          joinableRooms: joinableRooms,\n          joinedRooms: _this3.currentUser.rooms\n        });\n      }).catch(function (err) {\n        return console.log('error on joinable rooms', err);\n      });\n    }\n  }, {\n    key: \"subscribeToRoom\",\n    value: function subscribeToRoom(roomId) {\n      var _this4 = this;\n\n      this.setState({\n        messages: []\n      });\n      this.currentUser.subscribeToRoom({\n        roomId: roomId,\n        hooks: {\n          onMessage: function onMessage(message) {\n            _this4.setState({\n              messages: [].concat(_toConsumableArray(_this4.state.messages), [message])\n            });\n          }\n        }\n      }).then(function (room) {\n        _this4.setState({\n          roomId: room.id\n        });\n\n        _this4.getRooms();\n      }).catch(function (err) {\n        return console.log('error subscribing to room', err);\n      });\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(text) {\n      this.currentUser.sendMessage({\n        text: text,\n        roomId: this.state.roomId\n      });\n    }\n  }, {\n    key: \"createRoom\",\n    value: function createRoom(name) {\n      var _this5 = this;\n\n      this.currentUser.createRoom({\n        name: name\n      }).then(function (room) {\n        return _this5.subscribeToRoom(room.id);\n      }).catch(function (err) {\n        return console.log('error with createRoom: ', err);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(RoomList, {\n        roomId: this.state.roomId,\n        subscribeToRoom: this.subscribeToRoom,\n        rooms: [].concat(_toConsumableArray(this.state.joinableRooms), _toConsumableArray(this.state.joinedRooms)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), React.createElement(MessageList, {\n        roomId: this.state.roomId,\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }), React.createElement(SendMessageForm, {\n        disabled: !this.state.roomId,\n        sendMessage: this.sendMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }), React.createElement(NewRoomForm, {\n        createRoom: this.createRoom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ChatWrapper;\n}(React.Component);\n\nexport default ChatWrapper;","map":{"version":3,"sources":["/Users/Lillia/workspace/alpha2/src/components/chat/chatwrapper.js"],"names":["React","ChatManager","TokenProvider","Message","MessageList","NewRoomForm","RoomList","SendMessageForm","instanceLocator","tokenUrl","chatKey","ChatWrapper","props","state","roomId","messages","joinableRooms","joinedRooms","sendMessage","bind","subscribeToRoom","getRooms","createRoom","chatManager","userId","tokenProvider","url","connect","then","currentUser","catch","err","console","log","getJoinableRooms","setState","rooms","hooks","onMessage","message","room","id","text","name","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nimport Message from './message.js'\nimport MessageList from './messagelist.js'\nimport NewRoomForm from './newroomform.js'\nimport RoomList from './roomlist.js'\nimport SendMessageForm from './sendmessageform.js'\nimport './chatstyle.css'\n\nimport {instanceLocator, tokenUrl, chatKey} from '../../config.js'\n\n\nclass ChatWrapper extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      roomId: '',\n      messages: [],\n      joinableRooms:[],\n      joinedRooms: []\n    }\n    this.sendMessage = this.sendMessage.bind(this);\n    this.subscribeToRoom = this.subscribeToRoom.bind(this);\n    this.getRooms = this.getRooms.bind(this);\n    this.createRoom = this.createRoom.bind(this)\n  }\n  \n    componentDidMount(){\n      // this.onUsernameSubmitted(this.props.username);\n      const chatManager = new ChatManager({\n        instanceLocator: instanceLocator,\n        userId: 'joeclimber',\n        tokenProvider: new TokenProvider({\n          url: tokenUrl\n        })\n\n        // key: chatKey\n        })\n\n      chatManager.connect()\n      .then(currentUser => {\n        this.currentUser = currentUser\n        this.getRooms()\n        this.subscribeToRoom()\n\n\n      })\n      .catch(err => console.log('error on connecting', err))\n    }\n\n\n    getRooms() {\n    this.currentUser.getJoinableRooms()\n    .then(joinableRooms => {\n      this.setState({\n        joinableRooms,\n        joinedRooms: this.currentUser.rooms\n      })\n    })\n    .catch(err => console.log('error on joinable rooms', err))\n    }\n\n    subscribeToRoom(roomId) {\n    this.setState({ messages:[] })\n    this.currentUser.subscribeToRoom({\n      roomId:roomId,\n      hooks: {\n        onMessage: message => {\n          this.setState({\n            messages: [...this.state.messages, message]\n          })\n        }\n      }\n    })\n    .then(room => {\n      this.setState({\n        roomId: room.id\n      })\n      this.getRooms();\n    })\n    .catch(err => console.log('error subscribing to room', err))\n    }\n\n    sendMessage(text) {\n    this.currentUser.sendMessage({\n      text,\n      roomId:this.state.roomId\n\n    })\n    }\n\n    createRoom(name) {\n        this.currentUser.createRoom({\n              name\n          })\n          .then(room => this.subscribeToRoom(room.id))\n          .catch(err => console.log('error with createRoom: ', err))\n    }\n\n  render(){\n    return (\n      <div>\n          <RoomList\n            roomId = {this.state.roomId}\n            subscribeToRoom={this.subscribeToRoom}\n            rooms={[...this.state.joinableRooms, ...this.state.joinedRooms]} />\n          <MessageList\n            roomId={this.state.roomId}\n            messages={this.state.messages} />\n          <SendMessageForm\n          disabled={!this.state.roomId}\n          sendMessage={this.sendMessage} />\n          <NewRoomForm createRoom= {this.createRoom} />\n\n      </div>\n\n    );\n  }\n}\n\nexport default ChatWrapper;\n"]},"metadata":{},"sourceType":"module"}